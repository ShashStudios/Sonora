// Sonora Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Store {
  id          String    @id @default(cuid())
  name        String
  description String?
  ownerId     String    // User/seller ID
  stripeAccountId String? // Stripe Connect account
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
  orders      Order[]
}

model Product {
  id          String   @id @default(cuid())
  storeId     String
  name        String
  description String
  price       Float
  imageUrl    String?
  voiceDescription String? // Detailed voice description
  category    String?
  inStock     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  
  @@index([storeId])
}

model Order {
  id              String      @id @default(cuid())
  storeId         String
  buyerEmail      String
  buyerName       String?
  totalAmount     Float
  status          String      @default("pending") // pending, completed, cancelled
  acpOrderId      String?     // ACP order ID
  stripePaymentId String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  store           Store       @relation(fields: [storeId], references: [id])
  items           OrderItem[]
  
  @@index([storeId])
  @@index([acpOrderId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  priceAtPurchase Float
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  
  @@index([orderId])
  @@index([productId])
}

model Cart {
  id        String     @id @default(cuid())
  sessionId String     @unique // Anonymous session ID
  storeId   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  
  @@index([sessionId])
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  
  @@index([cartId])
  @@index([productId])
}
